#   Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO: define random functions  
# __all__ = ['gaussin', 
#            'uniform', 
#            'shuffle',
#            'randn',
#            'rand',
#            'randint']

from __future__ import print_function
from ..fluid.framework import Variable
from ..fluid.layer_helper import LayerHelper
from ..fluid.data_feeder import convert_dtype, check_variable_and_dtype, check_type, check_dtype

__all__ = ['randperm']


def randperm(n,
             out=None,
             dtype="int64",
             force_cpu=False,
             stop_gradient=True,
             seed=0):
    """
    This operator returns a random permutation of integers from 0 to n - 1.

    Args:
        n (int): The upper bound (exclusive), and it should be greater than 0.
        out (Variable, optional): Optional output which can be any created 
            Variable that meets the requirements to store the result of operation.
            If out is None, a new Varibale will be create to store the result. 
            Default: None.
        dtype (np.dtype|core.VarDesc.VarType|str, optional): The type of the 
            output Tensor. Supported data types: int64, int32. Default: int32.
        force_cpu (bool, optional): Force the output variable to be saved in cpu
            memory. Otherwise, save the output variable to the running device.
            Default: False.
        stop_gradient (bool, optional): Whether grad should record operations 
            on the returned tensor. Default: True.
        seed (int, optional): Random seed used for permute samples. If seed is 
            equal to 0, it means use a seed generated by the system. Note that 
            if seed is not 0, this operator will always generate the same random 
            permutation every time. Default: 0.

    Returns:
        Variable: A Tensor with a random permutation of integers from 0 to n - 1,
            and the shape of returned tensor is [n].

    Raise:
        TypeError: The dtype must be one of int32 and int64, and the data type 
            of out Tensor must be the same as the dtype. 
        ValueError: The input n should be greater than 0 in randperm op.

    Examples:
        .. code-block:: python
	    import paddle
	    import paddle.fluid as fluid

	    num = 6
	    is_use_gpu = False

	    data_1 = paddle.tensor.randperm(num)
	    fluid.layers.Print(data_1)

	    data_2 = paddle.tensor.randperm(num, dtype="int32", seed=1)
	    fluid.layers.Print(data_2)

	    data_3 = paddle.tensor.randperm(num, stop_gradient=False, force_cpu=True)
	    fluid.layers.Print(data_3)

	    paddle.tensor.randperm(num, out=data_3)
	    fluid.layers.Print(data_3)

	    place = fluid.CUDAPlace(0) if is_use_gpu else fluid.CPUPlace()
	    exe = fluid.Executor(place)
	    exe.run(fluid.default_startup_program())
	    exe.run()
 
    """

    if n < 1:
        raise ValueError("The input n should be greater "
                         "than 0 in randperm op.")
    check_dtype(dtype, 'dtype', ['int64', 'int32'], 'randperm')
    check_type(force_cpu, 'force_cpu', bool, 'randperm')
    check_type(stop_gradient, 'stop_gradient', bool, 'randperm')
    check_type(seed, 'seed', int, 'randperm')
    dtype = convert_dtype(dtype)

    helper = LayerHelper("randperm", **locals())
    if out is None:
        out = helper.create_variable_for_type_inference(dtype)
        if stop_gradient:
            out.stop_gradient = True
    else:
        check_type(out, 'out', Variable, 'randperm')
        check_variable_and_dtype(out, 'out', [dtype], 'randperm')

    inputs = dict()
    outputs = {'Out': [out]}
    attrs = {'n': n, 'force_cpu': force_cpu, 'dtype': out.dtype, 'seed': seed}

    helper.append_op(
        type='randperm', inputs=inputs, outputs=outputs, attrs=attrs)
    return out
